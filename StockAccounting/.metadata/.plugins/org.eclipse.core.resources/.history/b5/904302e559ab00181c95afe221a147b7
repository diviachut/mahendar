package CommonFunctionLibrary;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;


import Utilities.PropertyFileUtil;
import junit.framework.Assert;

public class FunctionLibrary {
	public static WebDriver startBrowser(WebDriver driver) throws Throwable, Throwable
	{
		if(PropertyFileUtil.getValueforkey("Browser").equalsIgnoreCase("Firefox"))
		{
			driver = new FirefoxDriver();
		}
		else
			if(PropertyFileUtil.getValueforkey("Browser").equalsIgnoreCase("Chrome"))
			{
				System.setProperty("webdriver.chrome.driver", "CommonjarFiles/chromedriver.exe");
				driver = new ChromeDriver();
			}
		return driver;
	}
public static void openApplication(WebDriver driver) throws Throwable, Throwable
{
	driver.manage().window().maximize();
	driver.get(PropertyFileUtil.getValueforkey("URL"));
}
public static void clickAction(WebDriver driver,String locatorType,String locatorValue)
{
	if(locatorType.equalsIgnoreCase("id"))
	{
		driver.findElement(By.id(locatorValue)).click();
	}
	else
		if(locatorType.equalsIgnoreCase("name"))
		{
			driver.findElement(By.name(locatorValue)).click();
		}	
		else
			if(locatorType.equalsIgnoreCase("xpath"))
			{
				driver.findElement(By.xpath(locatorValue)).click();
			}
			else
	if(locatorType.equalsIgnoreCase("linkText"))
	{
		driver.findElement(By.linkText(locatorValue)).click();
	}
}
public static void typeAction(WebDriver driver,String locatorType,String locatorValue,String data)
{
	if(locatorType.equalsIgnoreCase("id"))
	{
		driver.findElement(By.id(locatorValue)).clear();
		driver.findElement(By.id(locatorValue)).sendKeys(data);
	}
	else
		if(locatorType.equalsIgnoreCase("name"))
		{
			driver.findElement(By.name(locatorValue)).clear();
			driver.findElement(By.name(locatorValue)).sendKeys(data);
		}	
		else
			if(locatorType.equalsIgnoreCase("xpath"))
			{
				driver.findElement(By.xpath(locatorValue)).clear();
				driver.findElement(By.xpath(locatorValue)).sendKeys(data);
			}
			else
	if(locatorType.equalsIgnoreCase("linkText"))
	{
		driver.findElement(By.linkText(locatorValue)).clear();
		driver.findElement(By.linkText(locatorValue)).sendKeys(data);
	}
}
public static void closeApplication(WebDriver driver)
{
	driver.close();
}
public static void  waitForElement(WebDriver driver,String locatorType,String locatorValue)
{
	WebDriverWait wait = new WebDriverWait(driver,30);
	if(locatorType.equalsIgnoreCase("id"))
	{
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(locatorValue)));
	}
	else
		if(locatorType.equalsIgnoreCase("name"))
		{
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(locatorValue)));
		}
		else
			if(locatorType.equalsIgnoreCase("xpath"))
			{
				wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(locatorValue)));
			}
		
}
//public static void titleValidation(WebDriver driver)
//{
	//String act_title = driver.getTitle();
	//Assert.assertEquals(act_title,exp_title);
//}
public static String generateDate()
{
	Date date = new Date();
	SimpleDateFormat sdf = new SimpleDateFormat("YYYY_MM_dd_ss");
	return sdf.format(date);
}
public static void captureData(WebDriver driver,String locatorType,String locatorValue) throws Throwable
{
	Thread.sleep(3000);
	String data = "";
	if(locatorType.equalsIgnoreCase("id"))
	{
		data = driver.findElement(By.id(locatorValue)).getAttribute("value");
	}
	else
		if(locatorType.equalsIgnoreCase("xpath"))
		{
			data = driver.findElement(By.xpath(locatorValue)).getAttribute("value");
		}
	FileWriter fw = new FileWriter("./capturedData/Data.txt");
	BufferedWriter bw = new BufferedWriter(fw);
	bw.write(data);
	bw.flush();
	bw.close();
}
public static void tableValidation(WebDriver driver ,String colNum) throws Throwable
{
	FileReader fr = new FileReader("./capturedData/Data.txt");
	BufferedReader br = new BufferedReader(fr);
	String exp_data = br.readLine();
	//conversion from string to int
	int colNum1 = Integer.parseInt(colNum);
	if(driver.findElement(By.xpath(PropertyFileUtil.getValueforkey("search.box"))).isDisplayed())
	{
		driver.findElement(By.xpath(PropertyFileUtil.getValueforkey("search.box"))).clear();
		driver.findElement(By.xpath(PropertyFileUtil.getValueforkey("search.box"))).sendKeys(exp_data);
		driver.findElement(By.xpath(PropertyFileUtil.getValueforkey("search.box"))).click();
		Thread.sleep(2000);
	}
	else
	{
		driver.findElement(By.xpath(PropertyFileUtil.getValueforkey("search.box"))).click();
		driver.findElement(By.xpath(PropertyFileUtil.getValueforkey("search.box"))).clear();
	driver.findElement(By.xpath(PropertyFileUtil.getValueforkey("search.box"))).sendKeys(exp_data);
	driver.findElement(By.xpath(PropertyFileUtil.getValueforkey("search.box"))).click();
	Thread.sleep(2000);
}	
	WebElement webtable = driver.findElement(By.xpath(PropertyFileUtil.getValueforkey("webtable.path")));
	List <WebElement> rows = driver.findElements(By.tagName("tr"));
	for(int i=1;i<=rows.size();i++)
	{
		String act_data = driver.findElement((By.xpath(xpathExpression));
		Assert.assertEquals(act_data, exp_data);
		break;
	}
}
}
